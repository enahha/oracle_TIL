CREATE TABLE test1(
	id 	NUMBER(10) ,
	name varchar(10) 
	);
	
CREATE SEQUENCE tem_seq START WITH 1 INCREMENT BY 1 MAXVALUE 100 CYCLE NOCACHE;

INSERT INTO test1 VALUES (tem_seq.NEXTVAL, 'dmsdmsdk');

SELECT * FROM test1;

DELETE FROM test1;

INSERT INTO PROFESSOR VALUES ('12345', '정은아', '3001');
INSERT INTO PROFESSOR VALUES ('12346', '장영실', '2001');
INSERT INTO PROFESSOR VALUES ('12347', '김무친', '1001');

SELECT * FROM STUDENT;

ALTER TABLE SUBJECT  ADD PRIMARY KEY (SUBJECTID);

ALTER TABLE ENA.ENROLLMENT RENAME COLUMN ENROLLED TO ENROLLEID;    /*컬럼이름 수정*/

DELETE FROM STUDENT;

Insert into PROFESSOR (EMPLOYEEID,NAME,DEPARTMENTID) values ('1234567','김길동','10001');
Insert into PROFESSOR (EMPLOYEEID,NAME,DEPARTMENTID) values ('1212345','장영실','20001');
Insert into PROFESSOR (EMPLOYEEID,NAME,DEPARTMENTID) values ('1212346','박문수','30001');

Insert into DEPARTMENT (DEPARTMENTID,DEPARTMENTNAME) values ('10001','컴퓨터');
Insert into DEPARTMENT (DEPARTMENTID,DEPARTMENTNAME) values ('20001','전기');
Insert into DEPARTMENT (DEPARTMENTID,DEPARTMENTNAME) values ('30001','스포츠');

Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('1234568','김길동','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('1234567','홍길동','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('1234569','박길동','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('1234510','외래키','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('1234610','제약해','20001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('2345678','이름1','20001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('2345671','이름2','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('2345672','이름3','20001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('2345673','이름4','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('2345674','이름5','20001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('3345678','이름6','20001');
Insert INTO STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('3345671','이름7','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('3345672','이름8','20001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('3345673','이름9','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('3345674','이름10','20001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('4345678','철수6','20001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('4345671','철수7','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('4345672','철수8','20001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('4345673','철수9','10001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('4345674','철수10','20001');
Insert into STUDENT (STUDENTID,NAME,DEPARTMENTID) values ('4345675','특별한1','30001');

ALTER TABLE STUDENT 
ADD CONSTRAINT FK_DEPARTMENTID_STUDENT foreign key(DEPARTMENTID) REFERENCES department (DEPARTMENTID);

ALTER TABLE PROFESSOR  
ADD CONSTRAINT FK_DEPARTMENTID foreign key(DEPARTMENTID) REFERENCES department (DEPARTMENTID);

ALTER TABLE SUBJECT 
ADD CONSTRAINT fk_subjectid FOREIGN key(SUBJECTID) REFERENCES enrollment (SUBJECTID);

INSERT INTO SUBJECT(SUBJECTID, NAME) VALUES ('10001', 'DB');
INSERT INTO SUBJECT(SUBJECTID, NAME) VALUES ('20001', '자바PRG');
INSERT INTO SUBJECT(SUBJECTID, NAME) VALUES ('30001', 'HTML/CSS');
INSERT INTO SUBJECT(SUBJECTID, NAME) VALUES ('40001', 'JS');
INSERT INTO SUBJECT(SUBJECTID, NAME) VALUES ('50001', '스프링');
INSERT INTO SUBJECT(SUBJECTID, NAME) VALUES ('60001', '서블릿');


ALTER TABLE ENA.ENROLLMENT 
ADD CONSTRAINT FK_SUBJECT FOREIGN KEY (SUBJECTID) REFERENCES ENA.SUBJECT(SUBJECTID);

CREATE TABLE SUBJECT(
    SUBJECTID varCHAR(6) PRIMARY key,
    NAME VARCHAR(10));\
    
   
DROP TABLE ENROLLMENT;
   
CREATE TABLE ENROLLMENT(
    ENROLLED CHAR(5) PRIMARY key ,
    STUDENTID CHAR(7),
    SUBJECTID VARCHAR(6),
   
    CONSTRAINT fk_SUBJECTID FOREIGN key(SUBJECTID) REFERENCES SUBJECT (SUBJECTID)
    );


/*테이블 join*/
SELECT STUDENT.DEPARTMENTID, DEPARTMENT.DEPARTMENTNAME , student.NAME 
FROM STUDENT, DEPARTMENT
WHERE STUDENT.DEPARTMENTID =  DEPARTMENT.DEPARTMENTID;   


SELECT a.DEPARTMENTID, b.DEPARTMENTNAME , a.NAME 
FROM STUDENT a, DEPARTMENT b
WHERE a.DEPARTMENTID =  b.DEPARTMENTID;   


SELECT a.DEPARTMENTID, d.DEPARTMENTNAME , a.NAME , p.NAME 
FROM STUDENT a, PROFESSOR p,DEPARTMENT d
WHERE a.DEPARTMENTID =  d.DEPARTMENTID
AND d.DEPARTMENTID = p.DEPARTMENTID ;   

ALTER TABLE STUDENT ADD EMPLOYEEID char(7) default'-' NOT NULL;

/* 데이터 조회가 쉽게 하기 위해 만드는 중간다리 역할 */
CREATE TABLE ASSIGNMENT
(	GUIDENM NUMBER PRIMARY KEY,
	STUDENTID NUMBER NOT NULL,
	EMPLOYEEID NUMBER NOT NULL,
	CONFIRMED char(1) default'N' NOT null
);

INSERT INTO ASSIGNMENT(STUDENTID)
SELECT STUDENTID
FROM STUDENT;

CREATE TABLE deot
(dept_id	int PRIMARY key,
name 	varchar2(20) default'임시부서');

ALTER TABLE deot RENAME TO dept;


INSERT INTO dept VALUES (101, '홍길동');
INSERT INTO dept VALUES (102, '길동길');
INSERT INTO DEPT VALUES (103, '임시부서');
COMMIT;


UPDATE dept
SET name = '총무팀'
WHERE dept_id = '102';

ALTER TABLE DEPT ADD d

SELECT * FROM dept;

CREATE TABLE emp(
	empid	int,
	name	varchar2(14),
	salary	int,
	dept_id	int DEFAULT 103 NOT null);

ALTER TABLE emp
ADD CONSTRAINT fk_dept_id FOREIGN KEY (dept_id) REFERENCES dept(dept_id);

ALTER TABLE emp
ADD PRIMARY KEY (empid);

INSERT INTO emp VALUES (123456, '홍길동', 100, 101);
INSERT INTO emp VALUES (123457, '길동이형', 150, 101);
INSERT INTO emp(empid, name, salary) VALUES (123423, '이삼이', 200);
INSERT INTO emp VALUES (123424, '이사이', 300, 102);
INSERT INTO emp VALUES (143456, '김막이', 100, 101);
INSERT INTO emp VALUES (152457, '막국수', 150, 101);
INSERT INTO emp(empid, name, salary) VALUES (165423, '삼겹살', 200);
INSERT INTO emp VALUES (123434, '비어', 300, 102);
INSERT INTO emp VALUES (156724, '비어김', 300, 102);

SELECT * FROM emp;

/* 자동 증가, 감소 시퀀스 */
/*INCREMENT BY : 시퀀스 실행 시 증가시킬 값
* START WITH : 시퀀스의 시작값이다. (MINVALUE과 같거나 커야 한다)
* MINVALUE : 시퀀스가 시작되는 최솟값이다.
* MAXVALUE : 시퀀스가 끝나는 최댓값이다.
* NOCYCLE | CYCLE : NOCYCLE (반복안함), CYCLE(시퀀스의 최댓값에 도달 시 최솟값 1부터 다시시작)
* NOCACHE | CACHE : NOCACHE(사용안함), CACHE(캐시를 사용하여 미리 값을 할당해 놓아서 속도가 빠르며, 동시 사용자가 많을 경우 유리)
* NOORDER | ORDER : NOORDER(사용안함), ORDER(요청 순서로 값을 생성하여 발생 순서를 보장하지만 조금의 시스템 부하가 있음)*/
CREATE SEQUENCE tem_seq_up START WITH 1 INCREMENT BY 1 MAXVALUE 200 NOCYCLE NOCACHE;
CREATE SEQUENCE tem_seq_down START WITH 100 INCREMENT BY -1 MINVALUE 1 MAXVALUE 100 NOCYCLE NOCACHE;

-- select 문 정리 --
/* 중복제거 */
SELECT DISTINCT (dept_id)
FROM emp;


/* select문 간단 연산 */
SELECT empid AS "사번" , (salary * 12) AS "연봉"
FROM EMP;

/* 합쳐 출력 */
SELECT empid || '@@@@' || (salary * 12) -- 1111 + ' ' + 24000
FROM emp;

-- emp 테이블에서
-- SALARY가 200이상 400이하에 있는 타깃을 추출하기
SELECT *
FROM EMP
WHERE SALARY BETWEEN 200 AND 400;

SELECT *
FROM EMP
WHERE (SALARY >= 200) AND (SALARY <= 400);

/* 타깃 문자가 포함되어 있는 문자들 가져오기 */
SELECT *
FROM EMP e 
WHERE NAME LIKE '%김%';

SELECT * FROM EMP e WHERE SALARY = '100';

SELECT COUNT(*) -- 전체 행의 갯수
FROM EMP e ;

SELECT DEPT_ID, count(*)
FROM emp
GROUP BY DEPT_ID;

SELECT e.SALARY , count (*)
FROM EMP e
WHERE e.SALARY BETWEEN 200 AND 400
GROUP BY SALARY ;

SELECT dept_id, avg(salary)
FROM EMP
GROUP BY DEPT_ID 				-- 
HAVING avg(SALARY) >= 200;      -- 그룹별 집계된 결과 중 원하는 조건의 결과만 필터링하기 위해서는 HAVING 절을 사용


-- 서브쿼리, 인라인 뷰 -- 
/* EMP 테이블에서 empid, name, salary, DEPT_ID를 DEPT_ID가 101인 테이블을 조회 후 ,
 *  위의 조회값과 deot의 DEPT_ID 가 일치하는 값을 i.name, i.salary, d.name중에 찾아 조회하라.*/

SELECT i.name, i.salary, d.name
FROM (
	SELECT empid, name, salary, DEPT_ID
	FROM EMP
	WHERE DEPT_ID = 101
) i , DEPT d
WHERE d.DEPT_ID = i.DEPT_ID;

/* 타깃값에 해당되는 값을 조회 */
SELECT * 
FROM EMP e 
WHERE DEPT_ID IN (101,102);

-- --------------------------------------------
CREATE TABLE region (
	region_id	int,
	name	varchar(20)
);

INSERT INTO region VALUES (1, '서울');
INSERT INTO region VALUES (2, '미국');
INSERT INTO region VALUES (3, '유럽');

ALTER TABLE DEPT ADD region_id int;

INSERT INTO DEPT VALUES (201, '인사팀', 1);
INSERT INTO DEPT VALUES (202, '영업팀', 2);
INSERT INTO DEPT VALUES (203, '총무팀', 3);
INSERT INTO DEPT VALUES (301, '인사팀', 1);
INSERT INTO DEPT VALUES (302, '영업팀', 2);
INSERT INTO DEPT VALUES (303, '총무팀', 3);
INSERT INTO DEPT VALUES (402, '영업팀', 3);
INSERT INTO DEPT VALUES (403, '총무팀', 1);

UPDATE DEPT SET region_id = 1 WHERE DEPT_ID = 101;
UPDATE DEPT SET region_id = 2 WHERE DEPT_ID = 102;
UPDATE DEPT SET region_id = 3 WHERE DEPT_ID = 103;

-- 아래 두개는 동일한 결과를 갖는다.
SELECT *
FROM DEPT d 
WHERE DEPT_ID IN (101, 201, 301);

SELECT *
FROM DEPT d2 
WHERE DEPT_ID  = 
(
	SELECT DEPT_ID 
	FROM DEPT d 
	WHERE region_id = 1
	AND DEPT_ID = 101
)
OR 
DEPT_ID  = (
	SELECT DEPT_ID 
	FROM DEPT d 
	WHERE region_id = 1
	AND DEPT_ID = 201
)
OR
DEPT_ID  = (
	SELECT DEPT_ID 
	FROM DEPT d 
	WHERE region_id = 1
	AND DEPT_ID = 301
);

/* 결과값 합쳐서 출력하기 concat */
SELECT CONCAT(CONCAT(empid, '@@@@'), name) AS '문자열 합치기'
FROM EMP e;